# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Mutation {
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createLanguage(data: LanguageCreateInput!): Language
  createLanguages(data: [LanguageCreateInput!]!): [Language]
  updateLanguage(
    where: LanguageWhereUniqueInput!
    data: LanguageUpdateInput!
  ): Language
  updateLanguages(data: [LanguageUpdateArgs!]!): [Language]
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteLanguages(where: [LanguageWhereUniqueInput!]!): [Language]
  createPhrase(data: PhraseCreateInput!): Phrase
  createPhrases(data: [PhraseCreateInput!]!): [Phrase]
  updatePhrase(where: PhraseWhereUniqueInput!, data: PhraseUpdateInput!): Phrase
  updatePhrases(data: [PhraseUpdateArgs!]!): [Phrase]
  deletePhrase(where: PhraseWhereUniqueInput!): Phrase
  deletePhrases(where: [PhraseWhereUniqueInput!]!): [Phrase]
  createTranslation(data: TranslationCreateInput!): Translation
  createTranslations(data: [TranslationCreateInput!]!): [Translation]
  updateTranslation(
    where: TranslationWhereUniqueInput!
    data: TranslationUpdateInput!
  ): Translation
  updateTranslations(data: [TranslationUpdateArgs!]!): [Translation]
  deleteTranslation(where: TranslationWhereUniqueInput!): Translation
  deleteTranslations(where: [TranslationWhereUniqueInput!]!): [Translation]
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  projects: ProjectManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  projects: ProjectRelateToManyForUpdateInput
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  projects: ProjectRelateToManyForCreateInput
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

type Project {
  id: ID!
  name: String
  description: String
  owner(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  ownerCount(where: UserWhereInput! = {}): Int
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  owner: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input ProjectUpdateInput {
  name: String
  description: String
  owner: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  name: String
  description: String
  owner: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Language {
  id: ID!
  name: String
  region_code: String
}

input LanguageWhereUniqueInput {
  id: ID
}

input LanguageWhereInput {
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
  id: IDFilter
  name: StringFilter
  region_code: StringFilter
}

input LanguageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  region_code: OrderDirection
}

input LanguageUpdateInput {
  name: String
  region_code: String
}

input LanguageUpdateArgs {
  where: LanguageWhereUniqueInput!
  data: LanguageUpdateInput!
}

input LanguageCreateInput {
  name: String
  region_code: String
}

type Phrase {
  id: ID!
  key: String
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  translations(
    where: TranslationWhereInput! = {}
    orderBy: [TranslationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Translation!]
  translationsCount(where: TranslationWhereInput! = {}): Int
}

input PhraseWhereUniqueInput {
  id: ID
}

input PhraseWhereInput {
  AND: [PhraseWhereInput!]
  OR: [PhraseWhereInput!]
  NOT: [PhraseWhereInput!]
  id: IDFilter
  key: StringFilter
  projects: ProjectManyRelationFilter
  translations: TranslationManyRelationFilter
}

input TranslationManyRelationFilter {
  every: TranslationWhereInput
  some: TranslationWhereInput
  none: TranslationWhereInput
}

input PhraseOrderByInput {
  id: OrderDirection
  key: OrderDirection
}

input PhraseUpdateInput {
  key: String
  projects: ProjectRelateToManyForUpdateInput
  translations: TranslationRelateToManyForUpdateInput
}

input TranslationRelateToManyForUpdateInput {
  disconnect: [TranslationWhereUniqueInput!]
  set: [TranslationWhereUniqueInput!]
  create: [TranslationCreateInput!]
  connect: [TranslationWhereUniqueInput!]
}

input PhraseUpdateArgs {
  where: PhraseWhereUniqueInput!
  data: PhraseUpdateInput!
}

input PhraseCreateInput {
  key: String
  projects: ProjectRelateToManyForCreateInput
  translations: TranslationRelateToManyForCreateInput
}

input TranslationRelateToManyForCreateInput {
  create: [TranslationCreateInput!]
  connect: [TranslationWhereUniqueInput!]
}

type Translation {
  id: ID!
  key: Phrase
  translate: String
  language: Language
}

input TranslationWhereUniqueInput {
  id: ID
}

input TranslationWhereInput {
  AND: [TranslationWhereInput!]
  OR: [TranslationWhereInput!]
  NOT: [TranslationWhereInput!]
  id: IDFilter
  key: PhraseWhereInput
  translate: StringFilter
  language: LanguageWhereInput
}

input TranslationOrderByInput {
  id: OrderDirection
  translate: OrderDirection
}

input TranslationUpdateInput {
  key: PhraseRelateToOneForUpdateInput
  translate: String
  language: LanguageRelateToOneForUpdateInput
}

input PhraseRelateToOneForUpdateInput {
  create: PhraseCreateInput
  connect: PhraseWhereUniqueInput
  disconnect: Boolean
}

input LanguageRelateToOneForUpdateInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
  disconnect: Boolean
}

input TranslationUpdateArgs {
  where: TranslationWhereUniqueInput!
  data: TranslationUpdateInput!
}

input TranslationCreateInput {
  key: PhraseRelateToOneForCreateInput
  translate: String
  language: LanguageRelateToOneForCreateInput
}

input PhraseRelateToOneForCreateInput {
  create: PhraseCreateInput
  connect: PhraseWhereUniqueInput
}

input LanguageRelateToOneForCreateInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  authenticatedItem: AuthenticatedItem
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  languages(
    where: LanguageWhereInput! = {}
    orderBy: [LanguageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Language!]
  language(where: LanguageWhereUniqueInput!): Language
  languagesCount(where: LanguageWhereInput! = {}): Int
  phrases(
    where: PhraseWhereInput! = {}
    orderBy: [PhraseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Phrase!]
  phrase(where: PhraseWhereUniqueInput!): Phrase
  phrasesCount(where: PhraseWhereInput! = {}): Int
  translations(
    where: TranslationWhereInput! = {}
    orderBy: [TranslationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Translation!]
  translation(where: TranslationWhereUniqueInput!): Translation
  translationsCount(where: TranslationWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
